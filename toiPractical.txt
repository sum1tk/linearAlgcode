Practical 1
Aim: Starting Raspbian OS, familiarizing with raspberry pi components and Interface to ethernet, monitor, USB.
Required Components:
1.	Raspberry pi
2.	Power supply
3.	USB keyboard, Mouse
4.	Micro SD card
5.	Monitor that support HDMI
6.	Ethernet cable

Procedure:
●	Switch off the power supply.
●	Remove your CPU connection from monitor.
●	Remove mouse and keyboard connection from CPU.
●	Connect USB port of Keyboard and mouse to Raspberry pi.
●	Connect Ethernet cable to Raspberry pi.
●	Connect monitor to connect wire and then connect to Raspberry pi.
●	Switch on power supply.

 
Practical 2
●	Aim: Displaying different LED pattern with Raspberry pi.
Components Required:
1.Raspberry pi.
2. Power supply
3.USB keyboard and mouse
4. SD card
5.LED pattern module.

Procedure:
●	Connect all Basic connections.
●	Open program of LED pattern in monitor written in python language.
●	Connect GND(ground) connection of Raspberry pi kit to GND of LED pattern module.
●	Connect pin no: 06,14,20,30,34,25,09,39 of Raspberry pi to LED pattern module.
●	Run your program and output will be display.
Code:
import RPi.GPIO as GPIO     
import time

GPIO.setmode(GPIO.BOARD)   #set the Pin mode you will be working with

led1 = 29
led2 = 31
led3 = 33
led4 = 35
led5 = 36
led6 = 37
led7 = 38
led8 = 40


#setup the ledPin(i.e. GPIO22) as output
GPIO.setup(led1, GPIO.OUT)
GPIO.setup(led2, GPIO.OUT)
GPIO.setup(led3, GPIO.OUT)
GPIO.setup(led4, GPIO.OUT)
GPIO.setup(led5, GPIO.OUT)
GPIO.setup(led6, GPIO.OUT)
GPIO.setup(led7, GPIO.OUT)
GPIO.setup(led8, GPIO.OUT)
GPIO.output(led1, False)
GPIO.output(led2, False)
GPIO.output(led3, False)
GPIO.output(led4, False)
GPIO.output(led5, False)
GPIO.output(led6, False)
GPIO.output(led7, False)
GPIO.output(led8, False)

def ledpattern(ledVal1, ledVal2, ledVal3, ledVal4, ledVal5, ledVal6, ledVal7,ledVal8):
    GPIO.output(led1, ledVal1)
    GPIO.output(led2, ledVal2)
    GPIO.output(led3, ledVal3)
    GPIO.output(led4, ledVal4)
    GPIO.output(led5, ledVal5)
    GPIO.output(led6, ledVal6)
    GPIO.output(led7, ledVal7)
    GPIO.output(led8, ledVal8)
    
def patterOne():
    for i in range (0, 3):
        ledpattern(1, 0, 1, 0, 1, 0, 1, 0)
        time.sleep(1)
        ledpattern(0, 1, 0, 1, 0, 1, 0, 1)
        time.sleep(1)

def patternTwo():
    for i in range (0, 5):
        ledpattern(1, 0, 0, 0, 0, 0, 0, 0)
        time.sleep(0.1)
        ledpattern(0, 1, 0, 0, 0, 0, 0, 0)
        time.sleep(0.1)
        ledpattern(0, 0, 1, 0, 0, 0, 0, 0)
        time.sleep(0.1)
        ledpattern(0, 0, 0, 1, 0, 0, 0, 0)
        time.sleep(0.1)
        ledpattern(0, 0, 0, 0, 1, 0, 0, 0)
        time.sleep(0.1)
        ledpattern(0, 0, 0, 0, 0, 1, 0, 0)
        time.sleep(0.1)
        ledpattern(0, 0, 0, 0, 0, 0, 1, 0)
        time.sleep(0.1)
        ledpattern(0, 0, 0, 0, 0, 0, 0, 1)
        time.sleep(0.1)
    
def patternThree():
    for i in range (0, 5):
        ledpattern(0, 0, 0, 0, 0, 0, 0, 1)
        time.sleep(0.1)
        ledpattern(0, 0, 0, 0, 0, 0, 1, 0)
        time.sleep(0.1)
        ledpattern(0, 0, 0, 0, 0, 1, 0, 0)
        time.sleep(0.1)
        ledpattern(0, 0, 0, 0, 1, 0, 0, 0)
        time.sleep(0.1)
        ledpattern(0, 0, 0, 1, 0, 0, 0, 0)
        time.sleep(0.1)
        ledpattern(0, 0, 1, 0, 0, 0, 0, 0)
        time.sleep(0.1)
        ledpattern(0, 1, 0, 0, 0, 0, 0, 0)
        time.sleep(0.1)
        ledpattern(1, 0, 0, 0, 0, 0, 0, 0)
        time.sleep(0.1)

def patternFour():
    for i in range (0, 5):
        ledpattern(0, 1, 1, 1, 1, 1, 1, 1)
        time.sleep(0.1)
        ledpattern(1, 0, 1, 1, 1, 1, 1, 1)
        time.sleep(0.1)
        ledpattern(1, 1, 0, 1, 1, 1, 1, 1)
        time.sleep(0.1)
        ledpattern(1, 1, 1, 0, 1, 1, 1, 1)
        time.sleep(0.1)
        ledpattern(1, 1, 1, 1, 0, 1, 1, 1)
        time.sleep(0.1)
        ledpattern(1, 1, 1, 1, 1, 0, 1, 1)
        time.sleep(0.1)
        ledpattern(1, 1, 1, 1, 1, 1, 0, 1)
        time.sleep(0.1)
        ledpattern(1, 1, 1, 1, 1, 1, 1, 0)
        time.sleep(0.1)

def patternFive():
    for i in range (0, 5):
        ledpattern(1, 1, 1, 1, 1, 1, 1, 0)
        time.sleep(0.1)
        ledpattern(1, 1, 1, 1, 1, 1, 0, 1)
        time.sleep(0.1)
        ledpattern(1, 1, 1, 1, 1, 0, 1, 1)
        time.sleep(0.1)
        ledpattern(1, 1, 1, 1, 0, 1, 1, 1)
        time.sleep(0.1)
        ledpattern(1, 1, 1, 0, 1, 1, 1, 1)
        time.sleep(0.1)
        ledpattern(1, 1, 0, 1, 1, 1, 1, 1)
        time.sleep(0.1)
        ledpattern(1, 0, 1, 1, 1, 1, 1, 1)
        time.sleep(0.1)
        ledpattern(0, 1, 1, 1, 1, 1, 1, 1)
        time.sleep(0.1)



try:
    while True:
        patterOne()
        patternTwo()
        patternThree()
        patternFour()
        patternFive()
               
finally:
    #reset the GPIO Pins
    GPIO.cleanup()
    










 
Practical 3
●	Aim:  Capturing images and videos with Raspberry pi and pi camera.
Components required :
Raspberry pi.
2. Power supply
3.USB keyboard and mouse
4. SD card
5.Camera Module along with your initial Raspberry pi Set up.
Procedure:
Procedure:
●	Connect all basic connection.
●	Connect Raspberry pi module in the slot of Raspberry pi .
●	Run your python program and capture the image and video.
Code:
from time import sleep
from picamera import PiCamera

camera = PiCamera()
camera.resolution = (1280, 720)
camera.start_preview()
sleep(10)
camera.capture('/home/pi/Pictures/newImage1.jpg')
camera.stop_preview()













Practical 4
Aim: Displaying Time over 4 Digit 7 Segment Display using Raspberry Pi.
Components Required:
1.Raspberry pi
2.Power supply
3.USB Keyboard and mouse
4.SD card
5.Digit 7 segment display module.
Procedure:
●	Connect all basic connections.
●	Connect Pin 2 of Raspberry pi to Vcc pin of module(4 digit 7 segment)
●	Connect pin 6 of Raspberry pi to GND of module.
●	Connect pin 38 of Raspberry pi to DIO of module.
●	Connect pin 40 of Raspberry pi to CLK of module.
●	Open your program and run your program in python shell in order to get output.
Code:
import math
import RPi.GPIO as IO
import threading
from time import sleep, localtime
# from tqdm import tqdm

# IO.setwarnings(False)
IO.setmode(IO.BCM)

HexDigits = [0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d,
             0x07, 0x7f, 0x6f, 0x77, 0x7c, 0x39, 0x5e, 0x79, 0x71]

ADDR_AUTO = 0x40
ADDR_FIXED = 0x44
STARTADDR = 0xC0
# DEBUG = False


class TM1637:
    __doublePoint = False
    __Clkpin = 0
    __Datapin = 0
    __brightness = 1.0  # default to max brightness
    __currentData = [0, 0, 0, 0]

    def __init__(self, CLK, DIO, brightness):
        self.__Clkpin = CLK
        self.__Datapin = DIO
        self.__brightness = brightness
        IO.setup(self.__Clkpin, IO.OUT)
        IO.setup(self.__Datapin, IO.OUT)

    def cleanup(self):
        """Stop updating clock, turn off display, and cleanup GPIO"""
        self.StopClock()
        self.Clear()
        IO.cleanup()

    def Clear(self):
        b = self.__brightness
        point = self.__doublePoint
        self.__brightness = 0
        self.__doublePoint = False
        data = [0x7F, 0x7F, 0x7F, 0x7F]
        self.Show(data)
        # Restore previous settings:
        self.__brightness = b
        self.__doublePoint = point

    def ShowInt(self, i):
        s = str(i)
        self.Clear()
        for i in range(0, len(s)):
            self.Show1(i, int(s[i]))

    def Show(self, data):
        for i in range(0, 4):
            self.__currentData[i] = data[i]

        self.start()
        self.writeByte(ADDR_AUTO)
        self.br()
        self.writeByte(STARTADDR)
        for i in range(0, 4):
            self.writeByte(self.coding(data[i]))
        self.br()
        self.writeByte(0x88 + int(self.__brightness))
        self.stop()

    def Show1(self, DigitNumber, data):
        """show one Digit (number 0...3)"""
        if(DigitNumber < 0 or DigitNumber > 3):
            return  # error

        self.__currentData[DigitNumber] = data

        self.start()
        self.writeByte(ADDR_FIXED)
        self.br()
        self.writeByte(STARTADDR | DigitNumber)
        self.writeByte(self.coding(data))
        self.br()
        self.writeByte(0x88 + int(self.__brightness))
        self.stop()

    def SetBrightness(self, percent):
        """Accepts percent brightness from 0 - 1"""
        max_brightness = 7.0
        brightness = math.ceil(max_brightness * percent)
        if (brightness < 0):
            brightness = 0
        if(self.__brightness != brightness):
            self.__brightness = brightness
            self.Show(self.__currentData)

    def ShowDoublepoint(self, on):
        """Show or hide double point divider"""
        if(self.__doublePoint != on):
            self.__doublePoint = on
            self.Show(self.__currentData)

    def writeByte(self, data):
        for i in range(0, 8):
            IO.output(self.__Clkpin, IO.LOW)
            if(data & 0x01):
                IO.output(self.__Datapin, IO.HIGH)
            else:
                IO.output(self.__Datapin, IO.LOW)
            data = data >> 1
            IO.output(self.__Clkpin, IO.HIGH)

        # wait for ACK
        IO.output(self.__Clkpin, IO.LOW)
        IO.output(self.__Datapin, IO.HIGH)
        IO.output(self.__Clkpin, IO.HIGH)
        IO.setup(self.__Datapin, IO.IN)

        while(IO.input(self.__Datapin)):
            sleep(0.001)
            if(IO.input(self.__Datapin)):
                IO.setup(self.__Datapin, IO.OUT)
                IO.output(self.__Datapin, IO.LOW)
                IO.setup(self.__Datapin, IO.IN)
        IO.setup(self.__Datapin, IO.OUT)

    def start(self):
        """send start signal to TM1637"""
        IO.output(self.__Clkpin, IO.HIGH)
        IO.output(self.__Datapin, IO.HIGH)
        IO.output(self.__Datapin, IO.LOW)
        IO.output(self.__Clkpin, IO.LOW)

    def stop(self):
        IO.output(self.__Clkpin, IO.LOW)
        IO.output(self.__Datapin, IO.LOW)
        IO.output(self.__Clkpin, IO.HIGH)
        IO.output(self.__Datapin, IO.HIGH)

    def br(self):
        """terse break"""
        self.stop()
        self.start()

    def coding(self, data):
        if(self.__doublePoint):
            pointData = 0x80
        else:
            pointData = 0

        if(data == 0x7F):
            data = 0
        else:
            data = HexDigits[data] + pointData
        return data

    def clock(self, military_time):
        """Clock script modified from:
            https://github.com/johnlr/raspberrypi-tm1637"""
        self.ShowDoublepoint(True)
        while (not self.__stop_event.is_set()):
            t = localtime()
            hour = t.tm_hour
            if not military_time:
              hour = 12 if (t.tm_hour % 12) == 0 else t.tm_hour % 12
            d0 = hour // 10 if hour // 10 else 0
            d1 = hour % 10
            d2 = t.tm_min // 10
            d3 = t.tm_min % 10
            digits = [d0, d1, d2, d3]
            self.Show(digits)
            # # Optional visual feedback of running alarm:
            # print digits
            # for i in tqdm(range(60 - t.tm_sec)):
            for i in range(60 - t.tm_sec):
                if (not self.__stop_event.is_set()):
                    sleep(1)

    def StartClock(self, military_time=True):
        # Stop event based on: http://stackoverflow.com/a/6524542/3219667
        self.__stop_event = threading.Event()
        self.__clock_thread = threading.Thread(
            target=self.clock, args=(military_time,))
        self.__clock_thread.start()

    def StopClock(self):
        try:
            print('Attempting to stop live clock')
            self.__stop_event.set()
        except:
            print('No clock to close')


if __name__ == "__main__":
    """Confirm the display operation"""
    display = TM1637(CLK=21, DIO=20, brightness=1.0)

    display.Clear()

    digits = [1, 2, 3, 4]
    display.Show(digits)
    print ("1234  - Working? (Press Key)")
    scrap = raw_input()

    print ("Updating one digit at a time:")
    display.Clear()
    display.Show1(1, 3)
    sleep(0.5)
    display.Show1(2, 2)
    sleep(0.5)
    display.Show1(3, 1)
    sleep(0.5)
    display.Show1(0, 4)
    print ("4321  - (Press Key)")
    scrap = raw_input()

    print ("Add double point\n")
    display.ShowDoublepoint(True)
    sleep(0.2)
    print ("Brightness Off")
    display.SetBrightness(0)
    sleep(0.5)
    print ("Full Brightness")
    display.SetBrightness(1)
    sleep(0.5)
    print ("30% Brightness")
    display.SetBrightness(0.3)
    sleep(0.3)

    # See clock.py for how to use the clock functions!











Practical 5
Aim: Telegram Communication
 Component Required:
●	1.Raspberry pi
●	2.Power supply
●	3.USB Keyboard and mouse
●	4.SD card
Procedure:
●	Steps : 
●	On telegram search @botfather
●	 Click start /new_bot 
●	Give name Choose username (unique) 
●	Copy API token in your telegram program.
●	Run your program and start communication.
Code:
import sys
import time
import random
import datetime
import telepot
import RPi.GPIO as GPIO
from telepot.loop import MessageLoop

red=23

now=datetime.datetime.now()
GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False)

GPIO.setup(red,GPIO.OUT)
GPIO.output(red,0)


def action(msg):
    chat_id = msg['chat']['id']
    command = msg['text']

    print ('Got command: %s' %command)
    if 'On' in command:
        message="Turn On"
        message=message+" red"
        GPIO.output(red,1)
        bot.sendMessage(chat_id,message)

    if 'Off' in command:
        message="Turn Off"
        message=message+" red"
        GPIO.output(red,0)
        bot.sendMessage(chat_id, message)

bot = telepot.Bot('7643010676:AAHSK_hjo_od_re79xgTXj1jrqLBLRn5c0c')
print(bot.getMe())
MessageLoop(bot,action).run_as_thread()
print ('I am listening...')

while 1:
     time.sleep(10)
























Practical 6
Aim : RFID Module interfacing with Raspberry Pi
Components Required:
1. Raspberry Pi.
2. USB keyboard and Mouse.
3. Micro SD card.
4. Connecting Wires.
5. RFID (Radio Frequency identification) Module.

Procedure:
1.	Connect all basic Connections.
2.	Open program and save your program with any name with extension.py in python shell. 
3.	Connect SDA to pin 24 of Raspberry pi
4.	Connect SCK to pin 23 of Raspberry pi
5.	Connect MOSI to pin 19 of Raspberry pi
6.	Connect MISO to pin 21 of Raspberry pi
7.	Connect GND to pin 6 of Raspberry pi
8.	Connect RST to pin 22 of Raspberry pi
9.	Connect 3.3v to pin 1 of Raspberry pi
10.	Run your program and check whether Card is read by your RFID module.
Code:
import RPi.GPIO as GPIO
import time
import serial                                                  
import serial module

GPIO.setmode(GPIO.BOARD)
#greenLED = 37
#redLED = 35
#buzzer = 33

#GPIO.setup(greenLED, GPIO.OUT)
#GPIO.setup(redLED, GPIO.OUT)
#GPIO.setup(buzzer, GPIO.OUT)

#GPIO.output(greenLED, False)
#GPIO.output(redLED, False)

#GPIO.output(buzzer, True)
#time.sleep(0.1)
#GPIO.output(buzzer, False)
#time.sleep(0.1)
#GPIO.output(buzzer, True)
#time.sleep(0.1)
#GPIO.output(buzzer, False)
#time.sleep(0.1)

def read_rfid ():
   ser = serial.Serial ("/dev/ttyUSB0")                           #Open named port 
   ser.baudrate = 9600                                            #Set baud rate to 9600
   data = ser.read(12)                                            #Read 12 characters from serial port to data
   ser.close ()                                                   #Close port
   return data                                                    #Return data

try:
   
   while True:
      id = read_rfid ()                                           #Function call
      print (id)	         				  #Print RFID

      if id=="400034E165F0":
         print("Access Granted")
         #GPIO.output(greenLED, True)
         #GPIO.output(redLED, False)
         #GPIO.output(buzzer, False)
         #time.sleep(2)
      else:
         print("Access Denied")
         #GPIO.output(greenLED, False)
         #GPIO.output(redLED, True)
         #GPIO.output(buzzer, True)
         #time.sleep(2)
      #GPIO.output(greenLED, False)
      #GPIO.output(redLED, False)
      #GPIO.output(buzzer, False)
finally:
   GPIO.cleanup()

